basePath: /v1
definitions:
  forms.CreateOrganizationForm:
    properties:
      description:
        maxLength: 1000
        minLength: 10
        type: string
      name:
        maxLength: 100
        minLength: 3
        type: string
    required:
    - description
    - name
    type: object
  forms.CreateServiceForm:
    properties:
      description:
        maxLength: 1000
        minLength: 10
        type: string
      name:
        maxLength: 100
        minLength: 3
        type: string
    required:
    - description
    - name
    type: object
  forms.CreateServiceVersionForm:
    properties:
      description:
        maxLength: 1000
        minLength: 10
        type: string
      releaseTimestamp:
        type: string
      version:
        type: string
    required:
    - description
    - version
    type: object
  forms.CreateUserForm:
    properties:
      email:
        maxLength: 100
        minLength: 3
        type: string
      name:
        maxLength: 100
        minLength: 2
        type: string
      password:
        maxLength: 100
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  forms.LoginForm:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  forms.UpdateServiceVersionForm:
    properties:
      description:
        maxLength: 1000
        minLength: 10
        type: string
      releaseTimestamp:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      details: {}
      message:
        type: string
      traceId:
        type: string
      type:
        type: string
    type: object
  models.Organization:
    properties:
      createdAt:
        description: |-
          gorm:"<-:create" only allows create and read but not update
          this is avoid updating created_at with a zero value by mistake
        type: string
      createdBy:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    type: object
  models.PaginatedResult-models_Organization:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Organization'
        type: array
      meta:
        properties:
          currentPage:
            type: integer
          nextPage:
            type: integer
          totalCount:
            type: integer
          totalPages:
            type: integer
        type: object
    type: object
  models.PaginatedResult-models_Service:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Service'
        type: array
      meta:
        properties:
          currentPage:
            type: integer
          nextPage:
            type: integer
          totalCount:
            type: integer
          totalPages:
            type: integer
        type: object
    type: object
  models.PaginatedResult-models_ServiceVersion:
    properties:
      data:
        items:
          $ref: '#/definitions/models.ServiceVersion'
        type: array
      meta:
        properties:
          currentPage:
            type: integer
          nextPage:
            type: integer
          totalCount:
            type: integer
          totalPages:
            type: integer
        type: object
    type: object
  models.Service:
    properties:
      createdAt:
        description: |-
          gorm:"<-:create" only allows create and read but not update
          this is avoid updating created_at with a zero value by mistake
        type: string
      description:
        type: string
      id:
        type: string
      metadata:
        $ref: '#/definitions/models.ServiceMetadata'
      name:
        type: string
      organizationId:
        type: string
      updatedAt:
        type: string
    type: object
  models.ServiceMetadata:
    properties:
      versionCount:
        type: integer
    type: object
  models.ServiceVersion:
    properties:
      createdAt:
        description: |-
          gorm:"<-:create" only allows create and read but not update
          this is avoid updating created_at with a zero value by mistake
        type: string
      description:
        type: string
      id:
        type: string
      releaseTimestamp:
        type: string
      serviceId:
        type: string
      updatedAt:
        type: string
      version:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        description: |-
          gorm:"<-:create" only allows create and read but not update
          this is avoid updating created_at with a zero value by mistake
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:9000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API server for the Konnect Platform
  termsOfService: http://swagger.io/terms/
  title: Konnect
  version: "1.0"
paths:
  /orgs:
    get:
      consumes:
      - application/json
      description: Get all organizations that the authenticated user belongs to
      parameters:
      - description: Search query
        in: query
        name: q
        type: string
      - description: Sort field
        enum:
        - name
        - created_at
        - updated_at
        in: query
        name: sort_by
        type: string
      - description: Sort direction
        enum:
        - asc
        - desc
        in: query
        name: sort
        type: string
      - default: 0
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedResult-models_Organization'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user's organizations
      tags:
      - Organizations
    post:
      consumes:
      - application/json
      description: Create a new organization for the authenticated user
      parameters:
      - description: Organization data
        in: body
        name: organization
        required: true
        schema:
          $ref: '#/definitions/forms.CreateOrganizationForm'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Organization'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new organization
      tags:
      - Organizations
  /orgs/{orgId}:
    delete:
      consumes:
      - application/json
      description: Delete an organization
      parameters:
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete organization
      tags:
      - Organizations
    get:
      consumes:
      - application/json
      description: Get a specific organization by ID
      parameters:
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Organization'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get organization by ID
      tags:
      - Organizations
    put:
      consumes:
      - application/json
      description: Update an existing organization
      parameters:
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      - description: Organization update data
        in: body
        name: organization
        required: true
        schema:
          $ref: '#/definitions/forms.CreateOrganizationForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Organization'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update organization
      tags:
      - Organizations
  /orgs/{orgId}/services:
    get:
      consumes:
      - application/json
      description: Gets all the services available
      parameters:
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      - description: Service name, supports searching the passed string in the name
          of the service
        in: query
        name: q
        type: string
      - description: Sort order for the list of services. Accepted values are asc
          and desc. Default is desc(assumes default on invalid values as well)
        enum:
        - asc
        - desc
        in: query
        name: sort
        type: string
      - description: The field on which sorting to be applied, supports name, created_at,
          updated_at. Default is updated_at(assumes default on invalid values as well)
        enum:
        - name
        - created_at
        - updated_at
        in: query
        name: sort_by
        type: string
      - description: Page number for pagination (0-based). Default is 0
        in: query
        name: page
        type: integer
      - description: Number of items per page. Default is 10, max is 100, assumes
          100 if >100 is passed
        in: query
        name: per_page
        type: integer
      - description: 'Additional data to include (comma-separated). Supported values:
          versionCount'
        in: query
        name: include
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedResult-models_Service'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get All services
      tags:
      - Service
    post:
      consumes:
      - application/json
      description: Creates a service
      parameters:
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      - description: Service
        in: body
        name: service
        required: true
        schema:
          $ref: '#/definitions/forms.CreateServiceForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Service'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a service
      tags:
      - Service
  /orgs/{orgId}/services/{serviceId}:
    delete:
      consumes:
      - application/json
      description: Deletes the specified service
      parameters:
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      - description: Service ID
        in: path
        name: serviceId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a service
      tags:
      - Service
    get:
      consumes:
      - application/json
      description: Gets the specified service
      parameters:
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      - description: Service ID
        in: path
        name: serviceId
        required: true
        type: string
      - description: 'Additional data to include (comma-separated). Supported values:
          versionCount'
        in: query
        name: include
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Service'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a service
      tags:
      - Service
    put:
      consumes:
      - application/json
      description: Updates the specified service
      parameters:
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      - description: Service ID
        in: path
        name: serviceId
        required: true
        type: string
      - description: Service
        in: body
        name: service
        required: true
        schema:
          $ref: '#/definitions/forms.CreateServiceForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Service'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a service
      tags:
      - Service
  /orgs/{orgId}/services/{serviceId}/versions:
    get:
      consumes:
      - application/json
      description: Gets all the versions available for the specified service
      parameters:
      - description: 'version, supports searching with version prefix, for example:
          passing 1 would return versions like 1.0.1,1.1.4 etc, passing 1.0 would
          return 1.0.3,1.0.7 etc'
        in: query
        name: q
        type: string
      - description: Sort order for the list of service versions. Accepted values
          are asc and desc. Default is desc(assumes default on invalid values as well)
        enum:
        - asc
        - desc
        in: query
        name: sort
        type: string
      - description: The field on which sorting to be applied, supports version, created_at,
          updated_at. Default is updated_at(assumes default on invalid values as well)
        enum:
        - version
        - created_at
        - updated_at
        in: query
        name: sort_by
        type: string
      - description: Page number for pagination (0-based). Default is 0
        in: query
        name: page
        type: integer
      - description: Number of items per page. Default is 10, max is 100, assumes
          100 if >100 is passed
        in: query
        name: per_page
        type: integer
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      - description: Service ID
        in: path
        name: serviceId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedResult-models_ServiceVersion'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get All versions of a service
      tags:
      - ServiceVersion
    post:
      consumes:
      - application/json
      description: |-
        Creates a version for the specified service
        version value must be a semantic version and releaseTimestamp must be valid RFC3339 timestamp
      parameters:
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      - description: Service ID
        in: path
        name: serviceId
        required: true
        type: string
      - description: ServiceVersion
        in: body
        name: serviceVersion
        required: true
        schema:
          $ref: '#/definitions/forms.CreateServiceVersionForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ServiceVersion'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a version for a service
      tags:
      - ServiceVersion
  /orgs/{orgId}/services/{serviceId}/versions/{versionId}:
    delete:
      consumes:
      - application/json
      description: Deletes the specified version of a service
      parameters:
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      - description: Service ID
        in: path
        name: serviceId
        required: true
        type: string
      - description: Service Version ID
        in: path
        name: versionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a version for a service
      tags:
      - ServiceVersion
    get:
      consumes:
      - application/json
      description: Get particular version by id for the specified service
      parameters:
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      - description: Service ID
        in: path
        name: serviceId
        required: true
        type: string
      - description: Service Version ID
        in: path
        name: versionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ServiceVersion'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a version of a service
      tags:
      - ServiceVersion
    patch:
      consumes:
      - application/json
      description: Updates the specified version of a service, version tag cannot
        be updated
      parameters:
      - description: Organization ID
        in: path
        name: orgId
        required: true
        type: string
      - description: Service ID
        in: path
        name: serviceId
        required: true
        type: string
      - description: Service Version ID
        in: path
        name: versionId
        required: true
        type: string
      - description: ServiceVersion
        in: body
        name: serviceVersion
        required: true
        schema:
          $ref: '#/definitions/forms.UpdateServiceVersionForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ServiceVersion'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a version for a service
      tags:
      - ServiceVersion
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: User login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/forms.LoginForm'
      produces:
      - application/json
      responses:
        "200":
          description: Contains user info and JWT token
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login user
      tags:
      - Authentication
  /users/logout:
    post:
      consumes:
      - application/json
      description: Invalidate user JWT token
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - Authentication
  /users/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/forms.CreateUserForm'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Register a new user
      tags:
      - Authentication
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
